#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.14.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from niha_thrift import Neo4Niha
from niha_thrift.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  string createNode(TNode node)')
    print('  TNode retrieveNode(string query)')
    print('  bool updateNode(TNode node, string neo4Id)')
    print('  bool deleteNode(string neo4Id)')
    print('  string createRelation(TRelation relation)')
    print('  TRelation retrieveByIdRelation(string neo4jId)')
    print('  TRelation retrieveRelation(string query)')
    print('  bool updateRelation(TRelation relation, string neo4Id)')
    print('  bool deleteRelation(string neo4Id)')
    print('  string createGraph(TGraph graph)')
    print('  TGraph retrieveByIdGraph(string neo4jId)')
    print('  TGraph retrieveGraph(string query)')
    print('  bool updateGraph(TGraph graph, string neo4Id)')
    print('  bool deleteGraph(string neo4Id)')
    print('  string createMemoryChunk(TMemoryChunk memoryChunk)')
    print('  TMemoryChunk retrieveByIdMemoryChunk(string neo4jId)')
    print('  TMemoryChunk retrieveMemoryChunk(string query)')
    print('  bool updateMemoryChunk(TMemoryChunk memoryChunk, string neo4Id)')
    print('  bool deleteMemoryChunk(string neo4Id)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = Neo4Niha.Client(protocol)
transport.open()

if cmd == 'createNode':
    if len(args) != 1:
        print('createNode requires 1 args')
        sys.exit(1)
    pp.pprint(client.createNode(eval(args[0]),))

elif cmd == 'retrieveNode':
    if len(args) != 1:
        print('retrieveNode requires 1 args')
        sys.exit(1)
    pp.pprint(client.retrieveNode(args[0],))

elif cmd == 'updateNode':
    if len(args) != 2:
        print('updateNode requires 2 args')
        sys.exit(1)
    pp.pprint(client.updateNode(eval(args[0]), args[1],))

elif cmd == 'deleteNode':
    if len(args) != 1:
        print('deleteNode requires 1 args')
        sys.exit(1)
    pp.pprint(client.deleteNode(args[0],))

elif cmd == 'createRelation':
    if len(args) != 1:
        print('createRelation requires 1 args')
        sys.exit(1)
    pp.pprint(client.createRelation(eval(args[0]),))

elif cmd == 'retrieveByIdRelation':
    if len(args) != 1:
        print('retrieveByIdRelation requires 1 args')
        sys.exit(1)
    pp.pprint(client.retrieveByIdRelation(args[0],))

elif cmd == 'retrieveRelation':
    if len(args) != 1:
        print('retrieveRelation requires 1 args')
        sys.exit(1)
    pp.pprint(client.retrieveRelation(args[0],))

elif cmd == 'updateRelation':
    if len(args) != 2:
        print('updateRelation requires 2 args')
        sys.exit(1)
    pp.pprint(client.updateRelation(eval(args[0]), args[1],))

elif cmd == 'deleteRelation':
    if len(args) != 1:
        print('deleteRelation requires 1 args')
        sys.exit(1)
    pp.pprint(client.deleteRelation(args[0],))

elif cmd == 'createGraph':
    if len(args) != 1:
        print('createGraph requires 1 args')
        sys.exit(1)
    pp.pprint(client.createGraph(eval(args[0]),))

elif cmd == 'retrieveByIdGraph':
    if len(args) != 1:
        print('retrieveByIdGraph requires 1 args')
        sys.exit(1)
    pp.pprint(client.retrieveByIdGraph(args[0],))

elif cmd == 'retrieveGraph':
    if len(args) != 1:
        print('retrieveGraph requires 1 args')
        sys.exit(1)
    pp.pprint(client.retrieveGraph(args[0],))

elif cmd == 'updateGraph':
    if len(args) != 2:
        print('updateGraph requires 2 args')
        sys.exit(1)
    pp.pprint(client.updateGraph(eval(args[0]), args[1],))

elif cmd == 'deleteGraph':
    if len(args) != 1:
        print('deleteGraph requires 1 args')
        sys.exit(1)
    pp.pprint(client.deleteGraph(args[0],))

elif cmd == 'createMemoryChunk':
    if len(args) != 1:
        print('createMemoryChunk requires 1 args')
        sys.exit(1)
    pp.pprint(client.createMemoryChunk(eval(args[0]),))

elif cmd == 'retrieveByIdMemoryChunk':
    if len(args) != 1:
        print('retrieveByIdMemoryChunk requires 1 args')
        sys.exit(1)
    pp.pprint(client.retrieveByIdMemoryChunk(args[0],))

elif cmd == 'retrieveMemoryChunk':
    if len(args) != 1:
        print('retrieveMemoryChunk requires 1 args')
        sys.exit(1)
    pp.pprint(client.retrieveMemoryChunk(args[0],))

elif cmd == 'updateMemoryChunk':
    if len(args) != 2:
        print('updateMemoryChunk requires 2 args')
        sys.exit(1)
    pp.pprint(client.updateMemoryChunk(eval(args[0]), args[1],))

elif cmd == 'deleteMemoryChunk':
    if len(args) != 1:
        print('deleteMemoryChunk requires 1 args')
        sys.exit(1)
    pp.pprint(client.deleteMemoryChunk(args[0],))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
