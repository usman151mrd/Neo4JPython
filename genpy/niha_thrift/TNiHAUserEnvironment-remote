#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.14.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from niha_thrift import TNiHAUserEnvironment
from niha_thrift.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  void Init()')
    print('  void ShowMessage(string source, string msg)')
    print('  void OnSignin(TUser user, TEndPoint device_endpoint)')
    print('  void OnSignOut()')
    print('  void LogInfo(string source, string info)')
    print('  void LogException(string source, string exp)')
    print('  void LogFatal(string source, string fatal)')
    print('  void LogWarning(string source, string warning)')
    print('  void LogProgress(string source, TProgressStatus progress)')
    print('  void LogSensorState(string sensorid, TSensoryMotorState state)')
    print('  void LogActuatorState(string actuatorid, TSensoryMotorState state)')
    print('  void LogCodeletState(string codeletid, TCodeletState state)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = TNiHAUserEnvironment.Client(protocol)
transport.open()

if cmd == 'Init':
    if len(args) != 0:
        print('Init requires 0 args')
        sys.exit(1)
    pp.pprint(client.Init())

elif cmd == 'ShowMessage':
    if len(args) != 2:
        print('ShowMessage requires 2 args')
        sys.exit(1)
    pp.pprint(client.ShowMessage(args[0], args[1],))

elif cmd == 'OnSignin':
    if len(args) != 2:
        print('OnSignin requires 2 args')
        sys.exit(1)
    pp.pprint(client.OnSignin(eval(args[0]), eval(args[1]),))

elif cmd == 'OnSignOut':
    if len(args) != 0:
        print('OnSignOut requires 0 args')
        sys.exit(1)
    pp.pprint(client.OnSignOut())

elif cmd == 'LogInfo':
    if len(args) != 2:
        print('LogInfo requires 2 args')
        sys.exit(1)
    pp.pprint(client.LogInfo(args[0], args[1],))

elif cmd == 'LogException':
    if len(args) != 2:
        print('LogException requires 2 args')
        sys.exit(1)
    pp.pprint(client.LogException(args[0], args[1],))

elif cmd == 'LogFatal':
    if len(args) != 2:
        print('LogFatal requires 2 args')
        sys.exit(1)
    pp.pprint(client.LogFatal(args[0], args[1],))

elif cmd == 'LogWarning':
    if len(args) != 2:
        print('LogWarning requires 2 args')
        sys.exit(1)
    pp.pprint(client.LogWarning(args[0], args[1],))

elif cmd == 'LogProgress':
    if len(args) != 2:
        print('LogProgress requires 2 args')
        sys.exit(1)
    pp.pprint(client.LogProgress(args[0], eval(args[1]),))

elif cmd == 'LogSensorState':
    if len(args) != 2:
        print('LogSensorState requires 2 args')
        sys.exit(1)
    pp.pprint(client.LogSensorState(args[0], eval(args[1]),))

elif cmd == 'LogActuatorState':
    if len(args) != 2:
        print('LogActuatorState requires 2 args')
        sys.exit(1)
    pp.pprint(client.LogActuatorState(args[0], eval(args[1]),))

elif cmd == 'LogCodeletState':
    if len(args) != 2:
        print('LogCodeletState requires 2 args')
        sys.exit(1)
    pp.pprint(client.LogCodeletState(args[0], eval(args[1]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
