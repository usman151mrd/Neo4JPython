#
# Autogenerated by Thrift Compiler (0.14.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class TEPhylogenticType(object):
    AS_SYSTEM_TYPE = 0
    OPERATOR = 1
    SPECIAL_CHAR = 2
    PUNCTUATIONS = 3
    MULTIMEDIA = 4
    IMAGE = 5
    AUDIO = 6
    AUDIO_LINGUAL = 7
    LINGUAL = 8
    NODE = 9
    EDGE = 10
    GRAPH = 11
    CONCEPT = 12
    INSTANCE = 13
    PROPOSITION = 14
    RULE = 15
    PLACE = 16
    NAME = 17
    DATETIME = 18
    COMPANY = 19
    COLOR = 20
    MODEL = 21
    DATAFRAME = 22
    ROS_MSG_CUSTOM = 23
    ROS_MSG_GOALD = 24
    MAP = 25
    BATTERY_STATUS = 26
    LINGUAL_PERCEPTION = 27
    ROS_MSG_GoalStatusArray = 28
    ROS_MSG_AnalogIOState = 29
    ROS_MSG_AnalogIOStates = 30
    ROS_MSG_AnalogOutputCommand = 31
    ROS_MSG_AssemblyState = 32
    ROS_MSG_AssemblyStates = 33
    ROS_MSG_CameraControl = 34
    ROS_MSG_CameraSetting = 35
    ROS_MSG_CollisionAvoidanceStat = 36
    ROS_MSG_CollisionDetectionState = 37
    ROS_MSG_DigitalIOState = 38
    ROS_MSG_DigitalIOStates = 39
    ROS_MSG_DigitalOutputCommand = 40
    ROS_MSG_EndEffectorCommand = 41
    ROS_MSG_EndEffectorProperties = 42
    ROS_MSG_EndEffectorState = 43
    ROS_MSG_EndPointState = 44
    ROS_MSG_EndPointStates = 45
    ROS_MSG_HeadPanCommand = 46
    ROS_MSG_HeadState = 47
    ROS_MSG_ITBState = 48
    ROS_MSG_ITBStates = 49
    ROS_MSG_JointCommand = 50
    ROS_MSG_NavigatorState = 51
    ROS_MSG_NavigatorStates = 52
    ROS_MSG_RobustControllerStatus = 53
    ROS_MSG_SEAJointState = 54
    ROS_MSG_FollowJointTrajectoryAction = 55
    ROS_MSG_FollowJointTrajectoryActionFeedback = 56
    ROS_MSG_FollowJointTrajectoryActionGoal = 57
    ROS_MSG_FollowJointTrajectoryActionResult = 58
    ROS_MSG_FollowJointTrajectoryFeedback = 59
    ROS_MSG_FollowJointTrajectoryGoal = 60
    ROS_MSG_FollowJointTrajectoryResult = 61
    ROS_MSG_GripperCommand = 62
    ROS_MSG_GripperCommandAction = 63
    ROS_MSG_GripperCommandActionFeedback = 64

    _VALUES_TO_NAMES = {
        0: "AS_SYSTEM_TYPE",
        1: "OPERATOR",
        2: "SPECIAL_CHAR",
        3: "PUNCTUATIONS",
        4: "MULTIMEDIA",
        5: "IMAGE",
        6: "AUDIO",
        7: "AUDIO_LINGUAL",
        8: "LINGUAL",
        9: "NODE",
        10: "EDGE",
        11: "GRAPH",
        12: "CONCEPT",
        13: "INSTANCE",
        14: "PROPOSITION",
        15: "RULE",
        16: "PLACE",
        17: "NAME",
        18: "DATETIME",
        19: "COMPANY",
        20: "COLOR",
        21: "MODEL",
        22: "DATAFRAME",
        23: "ROS_MSG_CUSTOM",
        24: "ROS_MSG_GOALD",
        25: "MAP",
        26: "BATTERY_STATUS",
        27: "LINGUAL_PERCEPTION",
        28: "ROS_MSG_GoalStatusArray",
        29: "ROS_MSG_AnalogIOState",
        30: "ROS_MSG_AnalogIOStates",
        31: "ROS_MSG_AnalogOutputCommand",
        32: "ROS_MSG_AssemblyState",
        33: "ROS_MSG_AssemblyStates",
        34: "ROS_MSG_CameraControl",
        35: "ROS_MSG_CameraSetting",
        36: "ROS_MSG_CollisionAvoidanceStat",
        37: "ROS_MSG_CollisionDetectionState",
        38: "ROS_MSG_DigitalIOState",
        39: "ROS_MSG_DigitalIOStates",
        40: "ROS_MSG_DigitalOutputCommand",
        41: "ROS_MSG_EndEffectorCommand",
        42: "ROS_MSG_EndEffectorProperties",
        43: "ROS_MSG_EndEffectorState",
        44: "ROS_MSG_EndPointState",
        45: "ROS_MSG_EndPointStates",
        46: "ROS_MSG_HeadPanCommand",
        47: "ROS_MSG_HeadState",
        48: "ROS_MSG_ITBState",
        49: "ROS_MSG_ITBStates",
        50: "ROS_MSG_JointCommand",
        51: "ROS_MSG_NavigatorState",
        52: "ROS_MSG_NavigatorStates",
        53: "ROS_MSG_RobustControllerStatus",
        54: "ROS_MSG_SEAJointState",
        55: "ROS_MSG_FollowJointTrajectoryAction",
        56: "ROS_MSG_FollowJointTrajectoryActionFeedback",
        57: "ROS_MSG_FollowJointTrajectoryActionGoal",
        58: "ROS_MSG_FollowJointTrajectoryActionResult",
        59: "ROS_MSG_FollowJointTrajectoryFeedback",
        60: "ROS_MSG_FollowJointTrajectoryGoal",
        61: "ROS_MSG_FollowJointTrajectoryResult",
        62: "ROS_MSG_GripperCommand",
        63: "ROS_MSG_GripperCommandAction",
        64: "ROS_MSG_GripperCommandActionFeedback",
    }

    _NAMES_TO_VALUES = {
        "AS_SYSTEM_TYPE": 0,
        "OPERATOR": 1,
        "SPECIAL_CHAR": 2,
        "PUNCTUATIONS": 3,
        "MULTIMEDIA": 4,
        "IMAGE": 5,
        "AUDIO": 6,
        "AUDIO_LINGUAL": 7,
        "LINGUAL": 8,
        "NODE": 9,
        "EDGE": 10,
        "GRAPH": 11,
        "CONCEPT": 12,
        "INSTANCE": 13,
        "PROPOSITION": 14,
        "RULE": 15,
        "PLACE": 16,
        "NAME": 17,
        "DATETIME": 18,
        "COMPANY": 19,
        "COLOR": 20,
        "MODEL": 21,
        "DATAFRAME": 22,
        "ROS_MSG_CUSTOM": 23,
        "ROS_MSG_GOALD": 24,
        "MAP": 25,
        "BATTERY_STATUS": 26,
        "LINGUAL_PERCEPTION": 27,
        "ROS_MSG_GoalStatusArray": 28,
        "ROS_MSG_AnalogIOState": 29,
        "ROS_MSG_AnalogIOStates": 30,
        "ROS_MSG_AnalogOutputCommand": 31,
        "ROS_MSG_AssemblyState": 32,
        "ROS_MSG_AssemblyStates": 33,
        "ROS_MSG_CameraControl": 34,
        "ROS_MSG_CameraSetting": 35,
        "ROS_MSG_CollisionAvoidanceStat": 36,
        "ROS_MSG_CollisionDetectionState": 37,
        "ROS_MSG_DigitalIOState": 38,
        "ROS_MSG_DigitalIOStates": 39,
        "ROS_MSG_DigitalOutputCommand": 40,
        "ROS_MSG_EndEffectorCommand": 41,
        "ROS_MSG_EndEffectorProperties": 42,
        "ROS_MSG_EndEffectorState": 43,
        "ROS_MSG_EndPointState": 44,
        "ROS_MSG_EndPointStates": 45,
        "ROS_MSG_HeadPanCommand": 46,
        "ROS_MSG_HeadState": 47,
        "ROS_MSG_ITBState": 48,
        "ROS_MSG_ITBStates": 49,
        "ROS_MSG_JointCommand": 50,
        "ROS_MSG_NavigatorState": 51,
        "ROS_MSG_NavigatorStates": 52,
        "ROS_MSG_RobustControllerStatus": 53,
        "ROS_MSG_SEAJointState": 54,
        "ROS_MSG_FollowJointTrajectoryAction": 55,
        "ROS_MSG_FollowJointTrajectoryActionFeedback": 56,
        "ROS_MSG_FollowJointTrajectoryActionGoal": 57,
        "ROS_MSG_FollowJointTrajectoryActionResult": 58,
        "ROS_MSG_FollowJointTrajectoryFeedback": 59,
        "ROS_MSG_FollowJointTrajectoryGoal": 60,
        "ROS_MSG_FollowJointTrajectoryResult": 61,
        "ROS_MSG_GripperCommand": 62,
        "ROS_MSG_GripperCommandAction": 63,
        "ROS_MSG_GripperCommandActionFeedback": 64,
    }


class TESystemLevelType(object):
    INT16 = 0
    INT32 = 1
    INT64 = 2
    DOUBLE = 3
    BOOL = 4
    STRING = 5
    DATETIME = 6
    IMAGE = 7
    AUDIO = 8
    VIDEO = 9
    GRAPH = 10
    DATAFILE = 11
    DATASOURCE = 12

    _VALUES_TO_NAMES = {
        0: "INT16",
        1: "INT32",
        2: "INT64",
        3: "DOUBLE",
        4: "BOOL",
        5: "STRING",
        6: "DATETIME",
        7: "IMAGE",
        8: "AUDIO",
        9: "VIDEO",
        10: "GRAPH",
        11: "DATAFILE",
        12: "DATASOURCE",
    }

    _NAMES_TO_VALUES = {
        "INT16": 0,
        "INT32": 1,
        "INT64": 2,
        "DOUBLE": 3,
        "BOOL": 4,
        "STRING": 5,
        "DATETIME": 6,
        "IMAGE": 7,
        "AUDIO": 8,
        "VIDEO": 9,
        "GRAPH": 10,
        "DATAFILE": 11,
        "DATASOURCE": 12,
    }


class TEAbstractionLevel(object):
    SEMANTIC_NODE = 0
    CONCEPT_NODE = 1
    INSTANCE_NODE = 2

    _VALUES_TO_NAMES = {
        0: "SEMANTIC_NODE",
        1: "CONCEPT_NODE",
        2: "INSTANCE_NODE",
    }

    _NAMES_TO_VALUES = {
        "SEMANTIC_NODE": 0,
        "CONCEPT_NODE": 1,
        "INSTANCE_NODE": 2,
    }


class TERepresentationType(object):
    SEMANTIC_NETWORK = 0
    CONCEPTUAL_GRAPH = 1

    _VALUES_TO_NAMES = {
        0: "SEMANTIC_NETWORK",
        1: "CONCEPTUAL_GRAPH",
    }

    _NAMES_TO_VALUES = {
        "SEMANTIC_NETWORK": 0,
        "CONCEPTUAL_GRAPH": 1,
    }


class TESiginStatus(object):
    SIGNIN_SUCCESSFUL = 0
    SIGNIN_NOT_SUCCESSFUL = 1

    _VALUES_TO_NAMES = {
        0: "SIGNIN_SUCCESSFUL",
        1: "SIGNIN_NOT_SUCCESSFUL",
    }

    _NAMES_TO_VALUES = {
        "SIGNIN_SUCCESSFUL": 0,
        "SIGNIN_NOT_SUCCESSFUL": 1,
    }


class TDimension(object):
    """
    Attributes:
     - Neo4jID
     - Name
     - SystemLevelType
     - Value

    """


    def __init__(self, Neo4jID=None, Name=None, SystemLevelType=None, Value=None,):
        self.Neo4jID = Neo4jID
        self.Name = Name
        self.SystemLevelType = SystemLevelType
        self.Value = Value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.Neo4jID = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.Name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.SystemLevelType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.Value = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TDimension')
        if self.Neo4jID is not None:
            oprot.writeFieldBegin('Neo4jID', TType.STRING, 1)
            oprot.writeString(self.Neo4jID.encode('utf-8') if sys.version_info[0] == 2 else self.Neo4jID)
            oprot.writeFieldEnd()
        if self.Name is not None:
            oprot.writeFieldBegin('Name', TType.STRING, 2)
            oprot.writeString(self.Name.encode('utf-8') if sys.version_info[0] == 2 else self.Name)
            oprot.writeFieldEnd()
        if self.SystemLevelType is not None:
            oprot.writeFieldBegin('SystemLevelType', TType.I32, 3)
            oprot.writeI32(self.SystemLevelType)
            oprot.writeFieldEnd()
        if self.Value is not None:
            oprot.writeFieldBegin('Value', TType.STRING, 4)
            oprot.writeString(self.Value.encode('utf-8') if sys.version_info[0] == 2 else self.Value)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.Name is None:
            raise TProtocolException(message='Required field Name is unset!')
        if self.SystemLevelType is None:
            raise TProtocolException(message='Required field SystemLevelType is unset!')
        if self.Value is None:
            raise TProtocolException(message='Required field Value is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TFile(object):
    """
    Attributes:
     - FilePath
     - FileType

    """


    def __init__(self, FilePath=None, FileType=None,):
        self.FilePath = FilePath
        self.FileType = FileType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.FilePath = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.FileType = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TFile')
        if self.FilePath is not None:
            oprot.writeFieldBegin('FilePath', TType.STRING, 1)
            oprot.writeString(self.FilePath.encode('utf-8') if sys.version_info[0] == 2 else self.FilePath)
            oprot.writeFieldEnd()
        if self.FileType is not None:
            oprot.writeFieldBegin('FileType', TType.STRING, 2)
            oprot.writeString(self.FileType.encode('utf-8') if sys.version_info[0] == 2 else self.FileType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.FilePath is None:
            raise TProtocolException(message='Required field FilePath is unset!')
        if self.FileType is None:
            raise TProtocolException(message='Required field FileType is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TJobType(object):
    """
    Attributes:
     - Neo4jID
     - Name
     - Attachments
     - CodeletsToBeUsed
     - SensorsToBeUsed
     - ActuatorsToBeUsed

    """


    def __init__(self, Neo4jID=None, Name=None, Attachments=None, CodeletsToBeUsed=None, SensorsToBeUsed=None, ActuatorsToBeUsed=None,):
        self.Neo4jID = Neo4jID
        self.Name = Name
        self.Attachments = Attachments
        self.CodeletsToBeUsed = CodeletsToBeUsed
        self.SensorsToBeUsed = SensorsToBeUsed
        self.ActuatorsToBeUsed = ActuatorsToBeUsed

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.Neo4jID = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.Name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.SET:
                    self.Attachments = set()
                    (_etype3, _size0) = iprot.readSetBegin()
                    for _i4 in range(_size0):
                        _elem5 = TFile()
                        _elem5.read(iprot)
                        self.Attachments.add(_elem5)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.SET:
                    self.CodeletsToBeUsed = set()
                    (_etype9, _size6) = iprot.readSetBegin()
                    for _i10 in range(_size6):
                        _elem11 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.CodeletsToBeUsed.add(_elem11)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.SET:
                    self.SensorsToBeUsed = set()
                    (_etype15, _size12) = iprot.readSetBegin()
                    for _i16 in range(_size12):
                        _elem17 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.SensorsToBeUsed.add(_elem17)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.SET:
                    self.ActuatorsToBeUsed = set()
                    (_etype21, _size18) = iprot.readSetBegin()
                    for _i22 in range(_size18):
                        _elem23 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.ActuatorsToBeUsed.add(_elem23)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TJobType')
        if self.Neo4jID is not None:
            oprot.writeFieldBegin('Neo4jID', TType.STRING, 1)
            oprot.writeString(self.Neo4jID.encode('utf-8') if sys.version_info[0] == 2 else self.Neo4jID)
            oprot.writeFieldEnd()
        if self.Name is not None:
            oprot.writeFieldBegin('Name', TType.STRING, 2)
            oprot.writeString(self.Name.encode('utf-8') if sys.version_info[0] == 2 else self.Name)
            oprot.writeFieldEnd()
        if self.Attachments is not None:
            oprot.writeFieldBegin('Attachments', TType.SET, 3)
            oprot.writeSetBegin(TType.STRUCT, len(self.Attachments))
            for iter24 in self.Attachments:
                iter24.write(oprot)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.CodeletsToBeUsed is not None:
            oprot.writeFieldBegin('CodeletsToBeUsed', TType.SET, 4)
            oprot.writeSetBegin(TType.STRING, len(self.CodeletsToBeUsed))
            for iter25 in self.CodeletsToBeUsed:
                oprot.writeString(iter25.encode('utf-8') if sys.version_info[0] == 2 else iter25)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.SensorsToBeUsed is not None:
            oprot.writeFieldBegin('SensorsToBeUsed', TType.SET, 5)
            oprot.writeSetBegin(TType.STRING, len(self.SensorsToBeUsed))
            for iter26 in self.SensorsToBeUsed:
                oprot.writeString(iter26.encode('utf-8') if sys.version_info[0] == 2 else iter26)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.ActuatorsToBeUsed is not None:
            oprot.writeFieldBegin('ActuatorsToBeUsed', TType.SET, 6)
            oprot.writeSetBegin(TType.STRING, len(self.ActuatorsToBeUsed))
            for iter27 in self.ActuatorsToBeUsed:
                oprot.writeString(iter27.encode('utf-8') if sys.version_info[0] == 2 else iter27)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.Name is None:
            raise TProtocolException(message='Required field Name is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TJob(object):
    """
    Attributes:
     - Neo4jID
     - JobType
     - JobID
     - ScheduledDateTime
     - DueDateTime
     - PriorityLevel

    """


    def __init__(self, Neo4jID=None, JobType=None, JobID=None, ScheduledDateTime=None, DueDateTime=None, PriorityLevel=None,):
        self.Neo4jID = Neo4jID
        self.JobType = JobType
        self.JobID = JobID
        self.ScheduledDateTime = ScheduledDateTime
        self.DueDateTime = DueDateTime
        self.PriorityLevel = PriorityLevel

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.Neo4jID = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.JobType = TJobType()
                    self.JobType.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.JobID = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.ScheduledDateTime = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.DueDateTime = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I16:
                    self.PriorityLevel = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TJob')
        if self.Neo4jID is not None:
            oprot.writeFieldBegin('Neo4jID', TType.STRING, 1)
            oprot.writeString(self.Neo4jID.encode('utf-8') if sys.version_info[0] == 2 else self.Neo4jID)
            oprot.writeFieldEnd()
        if self.JobType is not None:
            oprot.writeFieldBegin('JobType', TType.STRUCT, 2)
            self.JobType.write(oprot)
            oprot.writeFieldEnd()
        if self.JobID is not None:
            oprot.writeFieldBegin('JobID', TType.STRING, 3)
            oprot.writeString(self.JobID.encode('utf-8') if sys.version_info[0] == 2 else self.JobID)
            oprot.writeFieldEnd()
        if self.ScheduledDateTime is not None:
            oprot.writeFieldBegin('ScheduledDateTime', TType.STRING, 4)
            oprot.writeString(self.ScheduledDateTime.encode('utf-8') if sys.version_info[0] == 2 else self.ScheduledDateTime)
            oprot.writeFieldEnd()
        if self.DueDateTime is not None:
            oprot.writeFieldBegin('DueDateTime', TType.STRING, 5)
            oprot.writeString(self.DueDateTime.encode('utf-8') if sys.version_info[0] == 2 else self.DueDateTime)
            oprot.writeFieldEnd()
        if self.PriorityLevel is not None:
            oprot.writeFieldBegin('PriorityLevel', TType.I16, 6)
            oprot.writeI16(self.PriorityLevel)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.ScheduledDateTime is None:
            raise TProtocolException(message='Required field ScheduledDateTime is unset!')
        if self.DueDateTime is None:
            raise TProtocolException(message='Required field DueDateTime is unset!')
        if self.PriorityLevel is None:
            raise TProtocolException(message='Required field PriorityLevel is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TNode(object):
    """
    Attributes:
     - Neo4jID
     - AoKID
     - Labels
     - Value
     - SystemLevelType
     - AbstractionLevel
     - Tag
     - Validity
     - ProcessingTag
     - Domains
     - TruthValue
     - Evaluation
     - DateTimeStamp
     - AgeInMilliseconds
     - AttentionLevel

    """


    def __init__(self, Neo4jID=None, AoKID=None, Labels=None, Value=None, SystemLevelType=None, AbstractionLevel=None, Tag=None, Validity=None, ProcessingTag=None, Domains=None, TruthValue=None, Evaluation=None, DateTimeStamp=None, AgeInMilliseconds=None, AttentionLevel=None,):
        self.Neo4jID = Neo4jID
        self.AoKID = AoKID
        self.Labels = Labels
        self.Value = Value
        self.SystemLevelType = SystemLevelType
        self.AbstractionLevel = AbstractionLevel
        self.Tag = Tag
        self.Validity = Validity
        self.ProcessingTag = ProcessingTag
        self.Domains = Domains
        self.TruthValue = TruthValue
        self.Evaluation = Evaluation
        self.DateTimeStamp = DateTimeStamp
        self.AgeInMilliseconds = AgeInMilliseconds
        self.AttentionLevel = AttentionLevel

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.Neo4jID = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.AoKID = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.SET:
                    self.Labels = set()
                    (_etype31, _size28) = iprot.readSetBegin()
                    for _i32 in range(_size28):
                        _elem33 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.Labels.add(_elem33)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.Value = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.SystemLevelType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.AbstractionLevel = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.Tag = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.Validity = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.ProcessingTag = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.SET:
                    self.Domains = set()
                    (_etype37, _size34) = iprot.readSetBegin()
                    for _i38 in range(_size34):
                        _elem39 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.Domains.add(_elem39)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.MAP:
                    self.TruthValue = {}
                    (_ktype41, _vtype42, _size40) = iprot.readMapBegin()
                    for _i44 in range(_size40):
                        _key45 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val46 = iprot.readDouble()
                        self.TruthValue[_key45] = _val46
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.DOUBLE:
                    self.Evaluation = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.DateTimeStamp = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.I64:
                    self.AgeInMilliseconds = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.DOUBLE:
                    self.AttentionLevel = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TNode')
        if self.Neo4jID is not None:
            oprot.writeFieldBegin('Neo4jID', TType.STRING, 1)
            oprot.writeString(self.Neo4jID.encode('utf-8') if sys.version_info[0] == 2 else self.Neo4jID)
            oprot.writeFieldEnd()
        if self.AoKID is not None:
            oprot.writeFieldBegin('AoKID', TType.STRING, 2)
            oprot.writeString(self.AoKID.encode('utf-8') if sys.version_info[0] == 2 else self.AoKID)
            oprot.writeFieldEnd()
        if self.Labels is not None:
            oprot.writeFieldBegin('Labels', TType.SET, 3)
            oprot.writeSetBegin(TType.STRING, len(self.Labels))
            for iter47 in self.Labels:
                oprot.writeString(iter47.encode('utf-8') if sys.version_info[0] == 2 else iter47)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.Value is not None:
            oprot.writeFieldBegin('Value', TType.STRING, 4)
            oprot.writeString(self.Value.encode('utf-8') if sys.version_info[0] == 2 else self.Value)
            oprot.writeFieldEnd()
        if self.SystemLevelType is not None:
            oprot.writeFieldBegin('SystemLevelType', TType.I32, 5)
            oprot.writeI32(self.SystemLevelType)
            oprot.writeFieldEnd()
        if self.AbstractionLevel is not None:
            oprot.writeFieldBegin('AbstractionLevel', TType.I32, 6)
            oprot.writeI32(self.AbstractionLevel)
            oprot.writeFieldEnd()
        if self.Tag is not None:
            oprot.writeFieldBegin('Tag', TType.STRING, 7)
            oprot.writeString(self.Tag.encode('utf-8') if sys.version_info[0] == 2 else self.Tag)
            oprot.writeFieldEnd()
        if self.Validity is not None:
            oprot.writeFieldBegin('Validity', TType.STRING, 8)
            oprot.writeString(self.Validity.encode('utf-8') if sys.version_info[0] == 2 else self.Validity)
            oprot.writeFieldEnd()
        if self.ProcessingTag is not None:
            oprot.writeFieldBegin('ProcessingTag', TType.STRING, 9)
            oprot.writeString(self.ProcessingTag.encode('utf-8') if sys.version_info[0] == 2 else self.ProcessingTag)
            oprot.writeFieldEnd()
        if self.Domains is not None:
            oprot.writeFieldBegin('Domains', TType.SET, 10)
            oprot.writeSetBegin(TType.STRING, len(self.Domains))
            for iter48 in self.Domains:
                oprot.writeString(iter48.encode('utf-8') if sys.version_info[0] == 2 else iter48)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.TruthValue is not None:
            oprot.writeFieldBegin('TruthValue', TType.MAP, 11)
            oprot.writeMapBegin(TType.STRING, TType.DOUBLE, len(self.TruthValue))
            for kiter49, viter50 in self.TruthValue.items():
                oprot.writeString(kiter49.encode('utf-8') if sys.version_info[0] == 2 else kiter49)
                oprot.writeDouble(viter50)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.Evaluation is not None:
            oprot.writeFieldBegin('Evaluation', TType.DOUBLE, 12)
            oprot.writeDouble(self.Evaluation)
            oprot.writeFieldEnd()
        if self.DateTimeStamp is not None:
            oprot.writeFieldBegin('DateTimeStamp', TType.STRING, 13)
            oprot.writeString(self.DateTimeStamp.encode('utf-8') if sys.version_info[0] == 2 else self.DateTimeStamp)
            oprot.writeFieldEnd()
        if self.AgeInMilliseconds is not None:
            oprot.writeFieldBegin('AgeInMilliseconds', TType.I64, 14)
            oprot.writeI64(self.AgeInMilliseconds)
            oprot.writeFieldEnd()
        if self.AttentionLevel is not None:
            oprot.writeFieldBegin('AttentionLevel', TType.DOUBLE, 15)
            oprot.writeDouble(self.AttentionLevel)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.AoKID is None:
            raise TProtocolException(message='Required field AoKID is unset!')
        if self.Labels is None:
            raise TProtocolException(message='Required field Labels is unset!')
        if self.Value is None:
            raise TProtocolException(message='Required field Value is unset!')
        if self.SystemLevelType is None:
            raise TProtocolException(message='Required field SystemLevelType is unset!')
        if self.AbstractionLevel is None:
            raise TProtocolException(message='Required field AbstractionLevel is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TRelation(object):
    """
    Attributes:
     - Neo4jID
     - AoKID
     - Labels
     - RelationType
     - SourceNode
     - TargetNode
     - Properties
     - AttentionLevel
     - TruthValue

    """


    def __init__(self, Neo4jID=None, AoKID=None, Labels=None, RelationType=None, SourceNode=None, TargetNode=None, Properties=None, AttentionLevel=None, TruthValue=None,):
        self.Neo4jID = Neo4jID
        self.AoKID = AoKID
        self.Labels = Labels
        self.RelationType = RelationType
        self.SourceNode = SourceNode
        self.TargetNode = TargetNode
        self.Properties = Properties
        self.AttentionLevel = AttentionLevel
        self.TruthValue = TruthValue

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.Neo4jID = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.AoKID = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.SET:
                    self.Labels = set()
                    (_etype54, _size51) = iprot.readSetBegin()
                    for _i55 in range(_size51):
                        _elem56 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.Labels.add(_elem56)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.RelationType = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.SourceNode = TNode()
                    self.SourceNode.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.TargetNode = TNode()
                    self.TargetNode.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.MAP:
                    self.Properties = {}
                    (_ktype58, _vtype59, _size57) = iprot.readMapBegin()
                    for _i61 in range(_size57):
                        _key62 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val63 = TDimension()
                        _val63.read(iprot)
                        self.Properties[_key62] = _val63
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.DOUBLE:
                    self.AttentionLevel = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.MAP:
                    self.TruthValue = {}
                    (_ktype65, _vtype66, _size64) = iprot.readMapBegin()
                    for _i68 in range(_size64):
                        _key69 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val70 = iprot.readDouble()
                        self.TruthValue[_key69] = _val70
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TRelation')
        if self.Neo4jID is not None:
            oprot.writeFieldBegin('Neo4jID', TType.STRING, 1)
            oprot.writeString(self.Neo4jID.encode('utf-8') if sys.version_info[0] == 2 else self.Neo4jID)
            oprot.writeFieldEnd()
        if self.AoKID is not None:
            oprot.writeFieldBegin('AoKID', TType.STRING, 2)
            oprot.writeString(self.AoKID.encode('utf-8') if sys.version_info[0] == 2 else self.AoKID)
            oprot.writeFieldEnd()
        if self.Labels is not None:
            oprot.writeFieldBegin('Labels', TType.SET, 3)
            oprot.writeSetBegin(TType.STRING, len(self.Labels))
            for iter71 in self.Labels:
                oprot.writeString(iter71.encode('utf-8') if sys.version_info[0] == 2 else iter71)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.RelationType is not None:
            oprot.writeFieldBegin('RelationType', TType.STRING, 4)
            oprot.writeString(self.RelationType.encode('utf-8') if sys.version_info[0] == 2 else self.RelationType)
            oprot.writeFieldEnd()
        if self.SourceNode is not None:
            oprot.writeFieldBegin('SourceNode', TType.STRUCT, 5)
            self.SourceNode.write(oprot)
            oprot.writeFieldEnd()
        if self.TargetNode is not None:
            oprot.writeFieldBegin('TargetNode', TType.STRUCT, 6)
            self.TargetNode.write(oprot)
            oprot.writeFieldEnd()
        if self.Properties is not None:
            oprot.writeFieldBegin('Properties', TType.MAP, 7)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.Properties))
            for kiter72, viter73 in self.Properties.items():
                oprot.writeString(kiter72.encode('utf-8') if sys.version_info[0] == 2 else kiter72)
                viter73.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.AttentionLevel is not None:
            oprot.writeFieldBegin('AttentionLevel', TType.DOUBLE, 8)
            oprot.writeDouble(self.AttentionLevel)
            oprot.writeFieldEnd()
        if self.TruthValue is not None:
            oprot.writeFieldBegin('TruthValue', TType.MAP, 10)
            oprot.writeMapBegin(TType.STRING, TType.DOUBLE, len(self.TruthValue))
            for kiter74, viter75 in self.TruthValue.items():
                oprot.writeString(kiter74.encode('utf-8') if sys.version_info[0] == 2 else kiter74)
                oprot.writeDouble(viter75)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TGraph(object):
    """
    Attributes:
     - Neo4jID
     - ID
     - Nodes
     - Relations
     - RepresentationType

    """


    def __init__(self, Neo4jID=None, ID=None, Nodes=None, Relations=None, RepresentationType=None,):
        self.Neo4jID = Neo4jID
        self.ID = ID
        self.Nodes = Nodes
        self.Relations = Relations
        self.RepresentationType = RepresentationType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.Neo4jID = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.ID = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.MAP:
                    self.Nodes = {}
                    (_ktype77, _vtype78, _size76) = iprot.readMapBegin()
                    for _i80 in range(_size76):
                        _key81 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val82 = TNode()
                        _val82.read(iprot)
                        self.Nodes[_key81] = _val82
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.MAP:
                    self.Relations = {}
                    (_ktype84, _vtype85, _size83) = iprot.readMapBegin()
                    for _i87 in range(_size83):
                        _key88 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val89 = TRelation()
                        _val89.read(iprot)
                        self.Relations[_key88] = _val89
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.RepresentationType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TGraph')
        if self.Neo4jID is not None:
            oprot.writeFieldBegin('Neo4jID', TType.STRING, 1)
            oprot.writeString(self.Neo4jID.encode('utf-8') if sys.version_info[0] == 2 else self.Neo4jID)
            oprot.writeFieldEnd()
        if self.ID is not None:
            oprot.writeFieldBegin('ID', TType.STRING, 2)
            oprot.writeString(self.ID.encode('utf-8') if sys.version_info[0] == 2 else self.ID)
            oprot.writeFieldEnd()
        if self.Nodes is not None:
            oprot.writeFieldBegin('Nodes', TType.MAP, 3)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.Nodes))
            for kiter90, viter91 in self.Nodes.items():
                oprot.writeString(kiter90.encode('utf-8') if sys.version_info[0] == 2 else kiter90)
                viter91.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.Relations is not None:
            oprot.writeFieldBegin('Relations', TType.MAP, 4)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.Relations))
            for kiter92, viter93 in self.Relations.items():
                oprot.writeString(kiter92.encode('utf-8') if sys.version_info[0] == 2 else kiter92)
                viter93.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.RepresentationType is not None:
            oprot.writeFieldBegin('RepresentationType', TType.I32, 5)
            oprot.writeI32(self.RepresentationType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TMemoryChunk(object):
    """
    Attributes:
     - Neo4jID
     - ID
     - TimeStamp
     - Graph
     - Capacity
     - AttentionLevel
     - DecayLevel
     - Importance
     - Evaluation

    """


    def __init__(self, Neo4jID=None, ID=None, TimeStamp=None, Graph=None, Capacity=None, AttentionLevel=None, DecayLevel=None, Importance=None, Evaluation=None,):
        self.Neo4jID = Neo4jID
        self.ID = ID
        self.TimeStamp = TimeStamp
        self.Graph = Graph
        self.Capacity = Capacity
        self.AttentionLevel = AttentionLevel
        self.DecayLevel = DecayLevel
        self.Importance = Importance
        self.Evaluation = Evaluation

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.Neo4jID = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.ID = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.TimeStamp = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.Graph = TGraph()
                    self.Graph.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I16:
                    self.Capacity = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.DOUBLE:
                    self.AttentionLevel = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.DOUBLE:
                    self.DecayLevel = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.DOUBLE:
                    self.Importance = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.DOUBLE:
                    self.Evaluation = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TMemoryChunk')
        if self.Neo4jID is not None:
            oprot.writeFieldBegin('Neo4jID', TType.STRING, 1)
            oprot.writeString(self.Neo4jID.encode('utf-8') if sys.version_info[0] == 2 else self.Neo4jID)
            oprot.writeFieldEnd()
        if self.ID is not None:
            oprot.writeFieldBegin('ID', TType.STRING, 2)
            oprot.writeString(self.ID.encode('utf-8') if sys.version_info[0] == 2 else self.ID)
            oprot.writeFieldEnd()
        if self.TimeStamp is not None:
            oprot.writeFieldBegin('TimeStamp', TType.STRING, 3)
            oprot.writeString(self.TimeStamp.encode('utf-8') if sys.version_info[0] == 2 else self.TimeStamp)
            oprot.writeFieldEnd()
        if self.Graph is not None:
            oprot.writeFieldBegin('Graph', TType.STRUCT, 4)
            self.Graph.write(oprot)
            oprot.writeFieldEnd()
        if self.Capacity is not None:
            oprot.writeFieldBegin('Capacity', TType.I16, 5)
            oprot.writeI16(self.Capacity)
            oprot.writeFieldEnd()
        if self.AttentionLevel is not None:
            oprot.writeFieldBegin('AttentionLevel', TType.DOUBLE, 6)
            oprot.writeDouble(self.AttentionLevel)
            oprot.writeFieldEnd()
        if self.DecayLevel is not None:
            oprot.writeFieldBegin('DecayLevel', TType.DOUBLE, 7)
            oprot.writeDouble(self.DecayLevel)
            oprot.writeFieldEnd()
        if self.Importance is not None:
            oprot.writeFieldBegin('Importance', TType.DOUBLE, 8)
            oprot.writeDouble(self.Importance)
            oprot.writeFieldEnd()
        if self.Evaluation is not None:
            oprot.writeFieldBegin('Evaluation', TType.DOUBLE, 9)
            oprot.writeDouble(self.Evaluation)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.Neo4jID is None:
            raise TProtocolException(message='Required field Neo4jID is unset!')
        if self.TimeStamp is None:
            raise TProtocolException(message='Required field TimeStamp is unset!')
        if self.Capacity is None:
            raise TProtocolException(message='Required field Capacity is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TCognitiveMemory(object):
    """
    Attributes:
     - Memory
     - ID
     - Capacity
     - MemoryChunks
     - IsDecayable
     - Scratchpad

    """


    def __init__(self, Memory=None, ID=None, Capacity=None, MemoryChunks=None, IsDecayable=None, Scratchpad=None,):
        self.Memory = Memory
        self.ID = ID
        self.Capacity = Capacity
        self.MemoryChunks = MemoryChunks
        self.IsDecayable = IsDecayable
        self.Scratchpad = Scratchpad

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.Memory = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.ID = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I16:
                    self.Capacity = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.MAP:
                    self.MemoryChunks = {}
                    (_ktype95, _vtype96, _size94) = iprot.readMapBegin()
                    for _i98 in range(_size94):
                        _key99 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val100 = TMemoryChunk()
                        _val100.read(iprot)
                        self.MemoryChunks[_key99] = _val100
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.IsDecayable = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.MAP:
                    self.Scratchpad = {}
                    (_ktype102, _vtype103, _size101) = iprot.readMapBegin()
                    for _i105 in range(_size101):
                        _key106 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val107 = TDimension()
                        _val107.read(iprot)
                        self.Scratchpad[_key106] = _val107
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TCognitiveMemory')
        if self.Memory is not None:
            oprot.writeFieldBegin('Memory', TType.STRING, 1)
            oprot.writeString(self.Memory.encode('utf-8') if sys.version_info[0] == 2 else self.Memory)
            oprot.writeFieldEnd()
        if self.ID is not None:
            oprot.writeFieldBegin('ID', TType.STRING, 2)
            oprot.writeString(self.ID.encode('utf-8') if sys.version_info[0] == 2 else self.ID)
            oprot.writeFieldEnd()
        if self.Capacity is not None:
            oprot.writeFieldBegin('Capacity', TType.I16, 3)
            oprot.writeI16(self.Capacity)
            oprot.writeFieldEnd()
        if self.MemoryChunks is not None:
            oprot.writeFieldBegin('MemoryChunks', TType.MAP, 4)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.MemoryChunks))
            for kiter108, viter109 in self.MemoryChunks.items():
                oprot.writeString(kiter108.encode('utf-8') if sys.version_info[0] == 2 else kiter108)
                viter109.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.IsDecayable is not None:
            oprot.writeFieldBegin('IsDecayable', TType.BOOL, 5)
            oprot.writeBool(self.IsDecayable)
            oprot.writeFieldEnd()
        if self.Scratchpad is not None:
            oprot.writeFieldBegin('Scratchpad', TType.MAP, 6)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.Scratchpad))
            for kiter110, viter111 in self.Scratchpad.items():
                oprot.writeString(kiter110.encode('utf-8') if sys.version_info[0] == 2 else kiter110)
                viter111.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TSensoryMotorState(object):
    """
    Attributes:
     - Activation
     - Enabled
     - HasStarted
     - IsActive
     - Name
     - ThreadName
     - Threshold
     - AttentionPriorityLevel
     - AttentionLevel
     - Frequency
     - Calibration

    """


    def __init__(self, Activation=None, Enabled=None, HasStarted=None, IsActive=None, Name=None, ThreadName=None, Threshold=None, AttentionPriorityLevel=None, AttentionLevel=None, Frequency=None, Calibration=None,):
        self.Activation = Activation
        self.Enabled = Enabled
        self.HasStarted = HasStarted
        self.IsActive = IsActive
        self.Name = Name
        self.ThreadName = ThreadName
        self.Threshold = Threshold
        self.AttentionPriorityLevel = AttentionPriorityLevel
        self.AttentionLevel = AttentionLevel
        self.Frequency = Frequency
        self.Calibration = Calibration

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.Activation = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.Enabled = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.HasStarted = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.IsActive = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.Name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.ThreadName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.DOUBLE:
                    self.Threshold = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.DOUBLE:
                    self.AttentionPriorityLevel = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.DOUBLE:
                    self.AttentionLevel = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I16:
                    self.Frequency = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.Calibration = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TSensoryMotorState')
        if self.Activation is not None:
            oprot.writeFieldBegin('Activation', TType.DOUBLE, 1)
            oprot.writeDouble(self.Activation)
            oprot.writeFieldEnd()
        if self.Enabled is not None:
            oprot.writeFieldBegin('Enabled', TType.BOOL, 2)
            oprot.writeBool(self.Enabled)
            oprot.writeFieldEnd()
        if self.HasStarted is not None:
            oprot.writeFieldBegin('HasStarted', TType.BOOL, 3)
            oprot.writeBool(self.HasStarted)
            oprot.writeFieldEnd()
        if self.IsActive is not None:
            oprot.writeFieldBegin('IsActive', TType.BOOL, 4)
            oprot.writeBool(self.IsActive)
            oprot.writeFieldEnd()
        if self.Name is not None:
            oprot.writeFieldBegin('Name', TType.STRING, 5)
            oprot.writeString(self.Name.encode('utf-8') if sys.version_info[0] == 2 else self.Name)
            oprot.writeFieldEnd()
        if self.ThreadName is not None:
            oprot.writeFieldBegin('ThreadName', TType.STRING, 6)
            oprot.writeString(self.ThreadName.encode('utf-8') if sys.version_info[0] == 2 else self.ThreadName)
            oprot.writeFieldEnd()
        if self.Threshold is not None:
            oprot.writeFieldBegin('Threshold', TType.DOUBLE, 7)
            oprot.writeDouble(self.Threshold)
            oprot.writeFieldEnd()
        if self.AttentionPriorityLevel is not None:
            oprot.writeFieldBegin('AttentionPriorityLevel', TType.DOUBLE, 8)
            oprot.writeDouble(self.AttentionPriorityLevel)
            oprot.writeFieldEnd()
        if self.AttentionLevel is not None:
            oprot.writeFieldBegin('AttentionLevel', TType.DOUBLE, 9)
            oprot.writeDouble(self.AttentionLevel)
            oprot.writeFieldEnd()
        if self.Frequency is not None:
            oprot.writeFieldBegin('Frequency', TType.I16, 10)
            oprot.writeI16(self.Frequency)
            oprot.writeFieldEnd()
        if self.Calibration is not None:
            oprot.writeFieldBegin('Calibration', TType.STRING, 11)
            oprot.writeString(self.Calibration.encode('utf-8') if sys.version_info[0] == 2 else self.Calibration)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TCodeletState(object):
    """
    Attributes:
     - Activation
     - EnableCount
     - Enabled
     - HasStarted
     - IsActive
     - IsLoop
     - LastStartTime
     - Name
     - ShouldLoop
     - ThreadName
     - Threshold
     - TimeStep
     - AttentionPriorityLevel
     - AttentionLevel

    """


    def __init__(self, Activation=None, EnableCount=None, Enabled=None, HasStarted=None, IsActive=None, IsLoop=None, LastStartTime=None, Name=None, ShouldLoop=None, ThreadName=None, Threshold=None, TimeStep=None, AttentionPriorityLevel=None, AttentionLevel=None,):
        self.Activation = Activation
        self.EnableCount = EnableCount
        self.Enabled = Enabled
        self.HasStarted = HasStarted
        self.IsActive = IsActive
        self.IsLoop = IsLoop
        self.LastStartTime = LastStartTime
        self.Name = Name
        self.ShouldLoop = ShouldLoop
        self.ThreadName = ThreadName
        self.Threshold = Threshold
        self.TimeStep = TimeStep
        self.AttentionPriorityLevel = AttentionPriorityLevel
        self.AttentionLevel = AttentionLevel

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.Activation = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.EnableCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.Enabled = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.HasStarted = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.IsActive = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.IsLoop = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.LastStartTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.Name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.BOOL:
                    self.ShouldLoop = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.ThreadName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.DOUBLE:
                    self.Threshold = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I64:
                    self.TimeStep = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.DOUBLE:
                    self.AttentionPriorityLevel = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.DOUBLE:
                    self.AttentionLevel = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TCodeletState')
        if self.Activation is not None:
            oprot.writeFieldBegin('Activation', TType.DOUBLE, 1)
            oprot.writeDouble(self.Activation)
            oprot.writeFieldEnd()
        if self.EnableCount is not None:
            oprot.writeFieldBegin('EnableCount', TType.I32, 2)
            oprot.writeI32(self.EnableCount)
            oprot.writeFieldEnd()
        if self.Enabled is not None:
            oprot.writeFieldBegin('Enabled', TType.BOOL, 3)
            oprot.writeBool(self.Enabled)
            oprot.writeFieldEnd()
        if self.HasStarted is not None:
            oprot.writeFieldBegin('HasStarted', TType.BOOL, 4)
            oprot.writeBool(self.HasStarted)
            oprot.writeFieldEnd()
        if self.IsActive is not None:
            oprot.writeFieldBegin('IsActive', TType.BOOL, 5)
            oprot.writeBool(self.IsActive)
            oprot.writeFieldEnd()
        if self.IsLoop is not None:
            oprot.writeFieldBegin('IsLoop', TType.BOOL, 6)
            oprot.writeBool(self.IsLoop)
            oprot.writeFieldEnd()
        if self.LastStartTime is not None:
            oprot.writeFieldBegin('LastStartTime', TType.I64, 7)
            oprot.writeI64(self.LastStartTime)
            oprot.writeFieldEnd()
        if self.Name is not None:
            oprot.writeFieldBegin('Name', TType.STRING, 8)
            oprot.writeString(self.Name.encode('utf-8') if sys.version_info[0] == 2 else self.Name)
            oprot.writeFieldEnd()
        if self.ShouldLoop is not None:
            oprot.writeFieldBegin('ShouldLoop', TType.BOOL, 9)
            oprot.writeBool(self.ShouldLoop)
            oprot.writeFieldEnd()
        if self.ThreadName is not None:
            oprot.writeFieldBegin('ThreadName', TType.STRING, 10)
            oprot.writeString(self.ThreadName.encode('utf-8') if sys.version_info[0] == 2 else self.ThreadName)
            oprot.writeFieldEnd()
        if self.Threshold is not None:
            oprot.writeFieldBegin('Threshold', TType.DOUBLE, 11)
            oprot.writeDouble(self.Threshold)
            oprot.writeFieldEnd()
        if self.TimeStep is not None:
            oprot.writeFieldBegin('TimeStep', TType.I64, 12)
            oprot.writeI64(self.TimeStep)
            oprot.writeFieldEnd()
        if self.AttentionPriorityLevel is not None:
            oprot.writeFieldBegin('AttentionPriorityLevel', TType.DOUBLE, 13)
            oprot.writeDouble(self.AttentionPriorityLevel)
            oprot.writeFieldEnd()
        if self.AttentionLevel is not None:
            oprot.writeFieldBegin('AttentionLevel', TType.DOUBLE, 14)
            oprot.writeDouble(self.AttentionLevel)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TProgressStatus(object):
    """
    Attributes:
     - Source
     - Status
     - Progress

    """


    def __init__(self, Source=None, Status=None, Progress=None,):
        self.Source = Source
        self.Status = Status
        self.Progress = Progress

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.Source = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.Status = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.Progress = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TProgressStatus')
        if self.Source is not None:
            oprot.writeFieldBegin('Source', TType.STRING, 1)
            oprot.writeString(self.Source.encode('utf-8') if sys.version_info[0] == 2 else self.Source)
            oprot.writeFieldEnd()
        if self.Status is not None:
            oprot.writeFieldBegin('Status', TType.STRING, 2)
            oprot.writeString(self.Status.encode('utf-8') if sys.version_info[0] == 2 else self.Status)
            oprot.writeFieldEnd()
        if self.Progress is not None:
            oprot.writeFieldBegin('Progress', TType.DOUBLE, 3)
            oprot.writeDouble(self.Progress)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TUser(object):
    """
    Attributes:
     - UserID
     - UserName
     - AppKey
     - RegisteredDevices

    """


    def __init__(self, UserID=None, UserName=None, AppKey=None, RegisteredDevices=None,):
        self.UserID = UserID
        self.UserName = UserName
        self.AppKey = AppKey
        self.RegisteredDevices = RegisteredDevices

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.UserID = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.UserName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.AppKey = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.RegisteredDevices = []
                    (_etype115, _size112) = iprot.readListBegin()
                    for _i116 in range(_size112):
                        _elem117 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.RegisteredDevices.append(_elem117)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TUser')
        if self.UserID is not None:
            oprot.writeFieldBegin('UserID', TType.STRING, 1)
            oprot.writeString(self.UserID.encode('utf-8') if sys.version_info[0] == 2 else self.UserID)
            oprot.writeFieldEnd()
        if self.UserName is not None:
            oprot.writeFieldBegin('UserName', TType.STRING, 2)
            oprot.writeString(self.UserName.encode('utf-8') if sys.version_info[0] == 2 else self.UserName)
            oprot.writeFieldEnd()
        if self.AppKey is not None:
            oprot.writeFieldBegin('AppKey', TType.STRING, 3)
            oprot.writeString(self.AppKey.encode('utf-8') if sys.version_info[0] == 2 else self.AppKey)
            oprot.writeFieldEnd()
        if self.RegisteredDevices is not None:
            oprot.writeFieldBegin('RegisteredDevices', TType.LIST, 4)
            oprot.writeListBegin(TType.STRING, len(self.RegisteredDevices))
            for iter118 in self.RegisteredDevices:
                oprot.writeString(iter118.encode('utf-8') if sys.version_info[0] == 2 else iter118)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TEndPoint(object):
    """
    Attributes:
     - Host
     - Port
     - NodeName

    """


    def __init__(self, Host=None, Port=None, NodeName=None,):
        self.Host = Host
        self.Port = Port
        self.NodeName = NodeName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.Host = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.Port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.NodeName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TEndPoint')
        if self.Host is not None:
            oprot.writeFieldBegin('Host', TType.STRING, 1)
            oprot.writeString(self.Host.encode('utf-8') if sys.version_info[0] == 2 else self.Host)
            oprot.writeFieldEnd()
        if self.Port is not None:
            oprot.writeFieldBegin('Port', TType.I32, 2)
            oprot.writeI32(self.Port)
            oprot.writeFieldEnd()
        if self.NodeName is not None:
            oprot.writeFieldBegin('NodeName', TType.STRING, 3)
            oprot.writeString(self.NodeName.encode('utf-8') if sys.version_info[0] == 2 else self.NodeName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.Host is None:
            raise TProtocolException(message='Required field Host is unset!')
        if self.Port is None:
            raise TProtocolException(message='Required field Port is unset!')
        if self.NodeName is None:
            raise TProtocolException(message='Required field NodeName is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(TDimension)
TDimension.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'Neo4jID', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'Name', 'UTF8', None, ),  # 2
    (3, TType.I32, 'SystemLevelType', None, None, ),  # 3
    (4, TType.STRING, 'Value', 'UTF8', None, ),  # 4
)
all_structs.append(TFile)
TFile.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'FilePath', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'FileType', 'UTF8', None, ),  # 2
)
all_structs.append(TJobType)
TJobType.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'Neo4jID', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'Name', 'UTF8', None, ),  # 2
    (3, TType.SET, 'Attachments', (TType.STRUCT, [TFile, None], False), None, ),  # 3
    (4, TType.SET, 'CodeletsToBeUsed', (TType.STRING, 'UTF8', False), None, ),  # 4
    (5, TType.SET, 'SensorsToBeUsed', (TType.STRING, 'UTF8', False), None, ),  # 5
    (6, TType.SET, 'ActuatorsToBeUsed', (TType.STRING, 'UTF8', False), None, ),  # 6
)
all_structs.append(TJob)
TJob.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'Neo4jID', 'UTF8', None, ),  # 1
    (2, TType.STRUCT, 'JobType', [TJobType, None], None, ),  # 2
    (3, TType.STRING, 'JobID', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'ScheduledDateTime', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'DueDateTime', 'UTF8', None, ),  # 5
    (6, TType.I16, 'PriorityLevel', None, None, ),  # 6
)
all_structs.append(TNode)
TNode.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'Neo4jID', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'AoKID', 'UTF8', None, ),  # 2
    (3, TType.SET, 'Labels', (TType.STRING, 'UTF8', False), None, ),  # 3
    (4, TType.STRING, 'Value', 'UTF8', None, ),  # 4
    (5, TType.I32, 'SystemLevelType', None, None, ),  # 5
    (6, TType.I32, 'AbstractionLevel', None, None, ),  # 6
    (7, TType.STRING, 'Tag', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'Validity', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'ProcessingTag', 'UTF8', None, ),  # 9
    (10, TType.SET, 'Domains', (TType.STRING, 'UTF8', False), None, ),  # 10
    (11, TType.MAP, 'TruthValue', (TType.STRING, 'UTF8', TType.DOUBLE, None, False), None, ),  # 11
    (12, TType.DOUBLE, 'Evaluation', None, None, ),  # 12
    (13, TType.STRING, 'DateTimeStamp', 'UTF8', None, ),  # 13
    (14, TType.I64, 'AgeInMilliseconds', None, None, ),  # 14
    (15, TType.DOUBLE, 'AttentionLevel', None, None, ),  # 15
)
all_structs.append(TRelation)
TRelation.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'Neo4jID', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'AoKID', 'UTF8', None, ),  # 2
    (3, TType.SET, 'Labels', (TType.STRING, 'UTF8', False), None, ),  # 3
    (4, TType.STRING, 'RelationType', 'UTF8', None, ),  # 4
    (5, TType.STRUCT, 'SourceNode', [TNode, None], None, ),  # 5
    (6, TType.STRUCT, 'TargetNode', [TNode, None], None, ),  # 6
    (7, TType.MAP, 'Properties', (TType.STRING, 'UTF8', TType.STRUCT, [TDimension, None], False), None, ),  # 7
    (8, TType.DOUBLE, 'AttentionLevel', None, None, ),  # 8
    None,  # 9
    (10, TType.MAP, 'TruthValue', (TType.STRING, 'UTF8', TType.DOUBLE, None, False), None, ),  # 10
)
all_structs.append(TGraph)
TGraph.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'Neo4jID', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'ID', 'UTF8', None, ),  # 2
    (3, TType.MAP, 'Nodes', (TType.STRING, 'UTF8', TType.STRUCT, [TNode, None], False), None, ),  # 3
    (4, TType.MAP, 'Relations', (TType.STRING, 'UTF8', TType.STRUCT, [TRelation, None], False), None, ),  # 4
    (5, TType.I32, 'RepresentationType', None, None, ),  # 5
)
all_structs.append(TMemoryChunk)
TMemoryChunk.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'Neo4jID', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'ID', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'TimeStamp', 'UTF8', None, ),  # 3
    (4, TType.STRUCT, 'Graph', [TGraph, None], None, ),  # 4
    (5, TType.I16, 'Capacity', None, None, ),  # 5
    (6, TType.DOUBLE, 'AttentionLevel', None, None, ),  # 6
    (7, TType.DOUBLE, 'DecayLevel', None, None, ),  # 7
    (8, TType.DOUBLE, 'Importance', None, None, ),  # 8
    (9, TType.DOUBLE, 'Evaluation', None, None, ),  # 9
)
all_structs.append(TCognitiveMemory)
TCognitiveMemory.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'Memory', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'ID', 'UTF8', None, ),  # 2
    (3, TType.I16, 'Capacity', None, None, ),  # 3
    (4, TType.MAP, 'MemoryChunks', (TType.STRING, 'UTF8', TType.STRUCT, [TMemoryChunk, None], False), None, ),  # 4
    (5, TType.BOOL, 'IsDecayable', None, None, ),  # 5
    (6, TType.MAP, 'Scratchpad', (TType.STRING, 'UTF8', TType.STRUCT, [TDimension, None], False), None, ),  # 6
)
all_structs.append(TSensoryMotorState)
TSensoryMotorState.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'Activation', None, None, ),  # 1
    (2, TType.BOOL, 'Enabled', None, None, ),  # 2
    (3, TType.BOOL, 'HasStarted', None, None, ),  # 3
    (4, TType.BOOL, 'IsActive', None, None, ),  # 4
    (5, TType.STRING, 'Name', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'ThreadName', 'UTF8', None, ),  # 6
    (7, TType.DOUBLE, 'Threshold', None, None, ),  # 7
    (8, TType.DOUBLE, 'AttentionPriorityLevel', None, None, ),  # 8
    (9, TType.DOUBLE, 'AttentionLevel', None, None, ),  # 9
    (10, TType.I16, 'Frequency', None, None, ),  # 10
    (11, TType.STRING, 'Calibration', 'UTF8', None, ),  # 11
)
all_structs.append(TCodeletState)
TCodeletState.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'Activation', None, None, ),  # 1
    (2, TType.I32, 'EnableCount', None, None, ),  # 2
    (3, TType.BOOL, 'Enabled', None, None, ),  # 3
    (4, TType.BOOL, 'HasStarted', None, None, ),  # 4
    (5, TType.BOOL, 'IsActive', None, None, ),  # 5
    (6, TType.BOOL, 'IsLoop', None, None, ),  # 6
    (7, TType.I64, 'LastStartTime', None, None, ),  # 7
    (8, TType.STRING, 'Name', 'UTF8', None, ),  # 8
    (9, TType.BOOL, 'ShouldLoop', None, None, ),  # 9
    (10, TType.STRING, 'ThreadName', 'UTF8', None, ),  # 10
    (11, TType.DOUBLE, 'Threshold', None, None, ),  # 11
    (12, TType.I64, 'TimeStep', None, None, ),  # 12
    (13, TType.DOUBLE, 'AttentionPriorityLevel', None, None, ),  # 13
    (14, TType.DOUBLE, 'AttentionLevel', None, None, ),  # 14
)
all_structs.append(TProgressStatus)
TProgressStatus.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'Source', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'Status', 'UTF8', None, ),  # 2
    (3, TType.DOUBLE, 'Progress', None, None, ),  # 3
)
all_structs.append(TUser)
TUser.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'UserID', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'UserName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'AppKey', 'UTF8', None, ),  # 3
    (4, TType.LIST, 'RegisteredDevices', (TType.STRING, 'UTF8', False), None, ),  # 4
)
all_structs.append(TEndPoint)
TEndPoint.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'Host', 'UTF8', None, ),  # 1
    (2, TType.I32, 'Port', None, None, ),  # 2
    (3, TType.STRING, 'NodeName', 'UTF8', None, ),  # 3
)
fix_spec(all_structs)
del all_structs
